/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/portfolios/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["portfolios_list"];
        put?: never;
        post: operations["portfolios_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/portfolios/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["portfolios_retrieve"];
        put: operations["portfolios_update"];
        post?: never;
        delete: operations["portfolios_destroy"];
        options?: never;
        head?: never;
        patch: operations["portfolios_partial_update"];
        trace?: never;
    };
    "/api/properties/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["properties_list"];
        put?: never;
        post: operations["properties_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/properties/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["properties_retrieve"];
        put: operations["properties_update"];
        post?: never;
        delete: operations["properties_destroy"];
        options?: never;
        head?: never;
        patch: operations["properties_partial_update"];
        trace?: never;
    };
    "/api/schema/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description OpenApi3 schema for this API. Format can be selected via content negotiation.
         *
         *     - YAML: application/vnd.oai.openapi
         *     - JSON: application/vnd.oai.openapi+json */
        get: operations["schema_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** @enum {string} */
        GisFeatureCollectionEnum: "FeatureCollection";
        /** @enum {string} */
        GisFeatureEnum: "Feature";
        PaginatedPropertyList: {
            type?: components["schemas"]["GisFeatureCollectionEnum"];
            /** @example 123 */
            count: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=4
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=2
             */
            previous?: string | null;
            features?: components["schemas"]["PropertyList"];
        };
        PatchedPortfolio: {
            readonly id?: number;
            name?: string;
            /** Format: date-time */
            readonly created_at?: string;
        };
        PatchedProperty: {
            type?: components["schemas"]["GisFeatureEnum"];
            readonly id?: number;
            geometry?: {
                /** @enum {string} */
                type?: "Point";
                /** @example [
                 *       12.9721,
                 *       77.5933
                 *     ] */
                coordinates?: number[];
            };
            properties?: {
                portfolio?: number | null;
                name?: string;
                address?: string;
                zip_code?: string;
                city?: string;
                /** @description Value in NOK */
                estimated_value?: number;
                relevant_risks?: number;
                handled_risks?: number;
                /** @description Risk in NOK */
                total_financial_risk?: number;
            };
        };
        Portfolio: {
            readonly id: number;
            name: string;
            /** Format: date-time */
            readonly created_at: string;
        };
        Property: {
            type?: components["schemas"]["GisFeatureEnum"];
            readonly id?: number;
            geometry?: {
                /** @enum {string} */
                type?: "Point";
                /** @example [
                 *       12.9721,
                 *       77.5933
                 *     ] */
                coordinates?: number[];
            };
            properties?: {
                portfolio?: number | null;
                name?: string;
                address?: string;
                zip_code?: string;
                city?: string;
                /** @description Value in NOK */
                estimated_value?: number;
                relevant_risks?: number;
                handled_risks?: number;
                /** @description Risk in NOK */
                total_financial_risk?: number;
            };
        };
        PropertyList: {
            type?: components["schemas"]["GisFeatureCollectionEnum"];
            features?: components["schemas"]["Property"][];
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    portfolios_list: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Portfolio"][];
                };
            };
        };
    };
    portfolios_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Portfolio"];
                "application/x-www-form-urlencoded": components["schemas"]["Portfolio"];
                "multipart/form-data": components["schemas"]["Portfolio"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Portfolio"];
                };
            };
        };
    };
    portfolios_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this portfolio. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Portfolio"];
                };
            };
        };
    };
    portfolios_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this portfolio. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Portfolio"];
                "application/x-www-form-urlencoded": components["schemas"]["Portfolio"];
                "multipart/form-data": components["schemas"]["Portfolio"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Portfolio"];
                };
            };
        };
    };
    portfolios_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this portfolio. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    portfolios_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this portfolio. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedPortfolio"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedPortfolio"];
                "multipart/form-data": components["schemas"]["PatchedPortfolio"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Portfolio"];
                };
            };
        };
    };
    properties_list: {
        parameters: {
            query?: {
                /** @description Specify a bounding box as filter: in_bbox=min_lon,min_lat,max_lon,max_lat */
                in_bbox?: Record<string, never>[];
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedPropertyList"];
                };
            };
        };
    };
    properties_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["Property"];
                "application/x-www-form-urlencoded": components["schemas"]["Property"];
                "multipart/form-data": components["schemas"]["Property"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Property"];
                };
            };
        };
    };
    properties_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this property. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Property"];
                };
            };
        };
    };
    properties_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this property. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["Property"];
                "application/x-www-form-urlencoded": components["schemas"]["Property"];
                "multipart/form-data": components["schemas"]["Property"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Property"];
                };
            };
        };
    };
    properties_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this property. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    properties_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this property. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedProperty"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedProperty"];
                "multipart/form-data": components["schemas"]["PatchedProperty"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Property"];
                };
            };
        };
    };
    schema_retrieve: {
        parameters: {
            query?: {
                format?: "json" | "yaml";
                lang?: "af" | "ar" | "ar-dz" | "ast" | "az" | "be" | "bg" | "bn" | "br" | "bs" | "ca" | "ckb" | "cs" | "cy" | "da" | "de" | "dsb" | "el" | "en" | "en-au" | "en-gb" | "eo" | "es" | "es-ar" | "es-co" | "es-mx" | "es-ni" | "es-ve" | "et" | "eu" | "fa" | "fi" | "fr" | "fy" | "ga" | "gd" | "gl" | "he" | "hi" | "hr" | "hsb" | "hu" | "hy" | "ia" | "id" | "ig" | "io" | "is" | "it" | "ja" | "ka" | "kab" | "kk" | "km" | "kn" | "ko" | "ky" | "lb" | "lt" | "lv" | "mk" | "ml" | "mn" | "mr" | "ms" | "my" | "nb" | "ne" | "nl" | "nn" | "os" | "pa" | "pl" | "pt" | "pt-br" | "ro" | "ru" | "sk" | "sl" | "sq" | "sr" | "sr-latn" | "sv" | "sw" | "ta" | "te" | "tg" | "th" | "tk" | "tr" | "tt" | "udm" | "ug" | "uk" | "ur" | "uz" | "vi" | "zh-hans" | "zh-hant";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.oai.openapi": {
                        [key: string]: unknown;
                    };
                    "application/yaml": {
                        [key: string]: unknown;
                    };
                    "application/vnd.oai.openapi+json": {
                        [key: string]: unknown;
                    };
                    "application/json": {
                        [key: string]: unknown;
                    };
                };
            };
        };
    };
}
